import { __awaiter } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { CONFIG } from '../../cache.module';
import * as i0 from "@angular/core";
import * as i1 from "@ionic/storage-angular";
export class CacheStorageService {
    constructor(storage, config) {
        this.storage = storage;
        this.config = config;
    }
    create() {
        return this.storage.create();
    }
    set(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.storage.set(this.buildKey(key), value);
        });
    }
    remove(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.storage.remove(this.buildKey(key));
        });
    }
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const value = yield this.storage.get(this.buildKey(key));
            return !!value ? Object.assign({ key }, value) : null;
        });
    }
    exists(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return !!(yield this.storage.get(this.buildKey(key)));
        });
    }
    all() {
        return __awaiter(this, void 0, void 0, function* () {
            const items = [];
            yield this.storage.forEach((val, key) => {
                if (this.isCachedItem(key, val)) {
                    items.push(Object.assign({ key: this.debuildKey(key) }, val));
                }
            });
            return items;
        });
    }
    /**
     * Returns whether or not an object is a cached item.
     */
    isCachedItem(key, item) {
        return item && item.expires && item.type && key.startsWith(this.config.keyPrefix);
    }
    /**
     * Makes sure that the key is prefixed properly
     */
    buildKey(key) {
        if (key.startsWith(this.config.keyPrefix)) {
            return key;
        }
        return this.config.keyPrefix + key;
    }
    /**
     * Makes sure that the key isn't prefixed
     */
    debuildKey(key) {
        if (key.startsWith(this.config.keyPrefix)) {
            return key.substr(this.config.keyPrefix.length);
        }
        return key;
    }
}
CacheStorageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: CacheStorageService, deps: [{ token: i1.Storage }, { token: CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
CacheStorageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: CacheStorageService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: CacheStorageService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Storage }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaW9uaWMtY2FjaGUvc3JjL2xpYi9zZXJ2aWNlcy9jYWNoZS1zdG9yYWdlL2NhY2hlLXN0b3JhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7QUFLNUMsTUFBTSxPQUFPLG1CQUFtQjtJQUM1QixZQUFvQixPQUFnQixFQUEwQixNQUFtQjtRQUE3RCxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQTBCLFdBQU0sR0FBTixNQUFNLENBQWE7SUFBRyxDQUFDO0lBRTlFLE1BQU07UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVZLEdBQUcsQ0FBQyxHQUFXLEVBQUUsS0FBVTs7WUFDcEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZELENBQUM7S0FBQTtJQUVZLE1BQU0sQ0FBQyxHQUFXOztZQUMzQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRCxDQUFDO0tBQUE7SUFFWSxHQUFHLENBQUMsR0FBVzs7WUFDeEIsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDekQsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUMxRCxDQUFDO0tBQUE7SUFFWSxNQUFNLENBQUMsR0FBVzs7WUFDM0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELENBQUM7S0FBQTtJQUVZLEdBQUc7O1lBQ1osTUFBTSxLQUFLLEdBQXVCLEVBQUUsQ0FBQztZQUNyQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBUSxFQUFFLEdBQVcsRUFBRSxFQUFFO2dCQUNqRCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFO29CQUM3QixLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ2pFO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFFSCxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDO0tBQUE7SUFFRDs7T0FFRztJQUNLLFlBQVksQ0FBQyxHQUFXLEVBQUUsSUFBUztRQUN2QyxPQUFPLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFFRDs7T0FFRztJQUNLLFFBQVEsQ0FBQyxHQUFXO1FBQ3hCLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3ZDLE9BQU8sR0FBRyxDQUFDO1NBQ2Q7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7O09BRUc7SUFDSyxVQUFVLENBQUMsR0FBVztRQUMxQixJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN2QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbkQ7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7O2dIQTlEUSxtQkFBbUIseUNBQ2tCLE1BQU07b0hBRDNDLG1CQUFtQjsyRkFBbkIsbUJBQW1CO2tCQUQvQixVQUFVOzswQkFFZ0MsTUFBTTsyQkFBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yYWdlIH0gZnJvbSAnQGlvbmljL3N0b3JhZ2UtYW5ndWxhcic7XG5pbXBvcnQgeyBDT05GSUcgfSBmcm9tICcuLi8uLi9jYWNoZS5tb2R1bGUnO1xuaW1wb3J0IHsgQ2FjaGVDb25maWcgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2NhY2hlLWNvbmZpZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU3RvcmFnZUNhY2hlSXRlbSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY2FjaGUtc3RvcmFnZS1pdGVtLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYWNoZVN0b3JhZ2VTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JhZ2U6IFN0b3JhZ2UsIEBJbmplY3QoQ09ORklHKSBwcml2YXRlIGNvbmZpZzogQ2FjaGVDb25maWcpIHt9XG5cbiAgICBwdWJsaWMgY3JlYXRlKCk6IFByb21pc2U8U3RvcmFnZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmNyZWF0ZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLnNldCh0aGlzLmJ1aWxkS2V5KGtleSksIHZhbHVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVtb3ZlKGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5yZW1vdmUodGhpcy5idWlsZEtleShrZXkpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0KGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCB0aGlzLnN0b3JhZ2UuZ2V0KHRoaXMuYnVpbGRLZXkoa2V5KSk7XG4gICAgICAgIHJldHVybiAhIXZhbHVlID8gT2JqZWN0LmFzc2lnbih7IGtleSB9LCB2YWx1ZSkgOiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBleGlzdHMoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuICEhKGF3YWl0IHRoaXMuc3RvcmFnZS5nZXQodGhpcy5idWlsZEtleShrZXkpKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGFsbCgpOiBQcm9taXNlPFN0b3JhZ2VDYWNoZUl0ZW1bXT4ge1xuICAgICAgICBjb25zdCBpdGVtczogU3RvcmFnZUNhY2hlSXRlbVtdID0gW107XG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZS5mb3JFYWNoKCh2YWw6IGFueSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ2FjaGVkSXRlbShrZXksIHZhbCkpIHtcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKE9iamVjdC5hc3NpZ24oeyBrZXk6IHRoaXMuZGVidWlsZEtleShrZXkpIH0sIHZhbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBhbiBvYmplY3QgaXMgYSBjYWNoZWQgaXRlbS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGlzQ2FjaGVkSXRlbShrZXk6IHN0cmluZywgaXRlbTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpdGVtICYmIGl0ZW0uZXhwaXJlcyAmJiBpdGVtLnR5cGUgJiYga2V5LnN0YXJ0c1dpdGgodGhpcy5jb25maWcua2V5UHJlZml4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyBzdXJlIHRoYXQgdGhlIGtleSBpcyBwcmVmaXhlZCBwcm9wZXJseVxuICAgICAqL1xuICAgIHByaXZhdGUgYnVpbGRLZXkoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgodGhpcy5jb25maWcua2V5UHJlZml4KSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5rZXlQcmVmaXggKyBrZXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFrZXMgc3VyZSB0aGF0IHRoZSBrZXkgaXNuJ3QgcHJlZml4ZWRcbiAgICAgKi9cbiAgICBwcml2YXRlIGRlYnVpbGRLZXkoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgodGhpcy5jb25maWcua2V5UHJlZml4KSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleS5zdWJzdHIodGhpcy5jb25maWcua2V5UHJlZml4Lmxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cbn1cbiJdfQ==