import { NgModule, InjectionToken } from '@angular/core';
import { CacheService } from './services/cache/cache.service';
import { IonicStorageModule } from '@ionic/storage-angular';
import { defaultConfig } from './constants/default-config.contant';
import { CacheStorageService } from './services/cache-storage/cache-storage.service';
import * as i0 from "@angular/core";
import * as i1 from "@ionic/storage-angular";
export const CONFIG = new InjectionToken('CONFIG');
export class CacheModule {
    static forRoot(cacheConfig) {
        return {
            ngModule: CacheModule,
            providers: [
                {
                    provide: CONFIG,
                    useValue: Object.assign(Object.assign({}, defaultConfig), cacheConfig)
                },
                CacheStorageService,
                CacheService
            ]
        };
    }
}
CacheModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: CacheModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CacheModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: CacheModule, imports: [i1.IonicStorageModule] });
CacheModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: CacheModule, imports: [[
            IonicStorageModule.forRoot({
                name: '__ionicCache',
                driverOrder: ['indexeddb', 'sqlite', 'websql']
            })
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: CacheModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        IonicStorageModule.forRoot({
                            name: '__ionicCache',
                            driverOrder: ['indexeddb', 'sqlite', 'websql']
                        })
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvaW9uaWMtY2FjaGUvc3JjL2xpYi9jYWNoZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFbkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7OztBQUVyRixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFjLENBQWMsUUFBUSxDQUFDLENBQUM7QUFVaEUsTUFBTSxPQUFPLFdBQVc7SUFDcEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUF5QjtRQUNwQyxPQUFPO1lBQ0gsUUFBUSxFQUFFLFdBQVc7WUFDckIsU0FBUyxFQUFFO2dCQUNQO29CQUNJLE9BQU8sRUFBRSxNQUFNO29CQUNmLFFBQVEsa0NBQU8sYUFBYSxHQUFLLFdBQVcsQ0FBRTtpQkFDakQ7Z0JBQ0QsbUJBQW1CO2dCQUNuQixZQUFZO2FBQ2Y7U0FDSixDQUFDO0lBQ04sQ0FBQzs7d0dBYlEsV0FBVzt5R0FBWCxXQUFXO3lHQUFYLFdBQVcsWUFQWDtZQUNMLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztnQkFDdkIsSUFBSSxFQUFFLGNBQWM7Z0JBQ3BCLFdBQVcsRUFBRSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDO2FBQ2pELENBQUM7U0FDTDsyRkFFUSxXQUFXO2tCQVJ2QixRQUFRO21CQUFDO29CQUNOLE9BQU8sRUFBRTt3QkFDTCxrQkFBa0IsQ0FBQyxPQUFPLENBQUM7NEJBQ3ZCLElBQUksRUFBRSxjQUFjOzRCQUNwQixXQUFXLEVBQUUsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQzt5QkFDakQsQ0FBQztxQkFDTDtpQkFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FjaGVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9jYWNoZS9jYWNoZS5zZXJ2aWNlJztcbmltcG9ydCB7IElvbmljU3RvcmFnZU1vZHVsZSB9IGZyb20gJ0Bpb25pYy9zdG9yYWdlLWFuZ3VsYXInO1xuaW1wb3J0IHsgZGVmYXVsdENvbmZpZyB9IGZyb20gJy4vY29uc3RhbnRzL2RlZmF1bHQtY29uZmlnLmNvbnRhbnQnO1xuaW1wb3J0IHsgQ2FjaGVDb25maWcgfSBmcm9tICcuL2ludGVyZmFjZXMvY2FjaGUtY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDYWNoZVN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9jYWNoZS1zdG9yYWdlL2NhY2hlLXN0b3JhZ2Uuc2VydmljZSc7XG5cbmV4cG9ydCBjb25zdCBDT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48Q2FjaGVDb25maWc+KCdDT05GSUcnKTtcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIElvbmljU3RvcmFnZU1vZHVsZS5mb3JSb290KHtcbiAgICAgICAgICAgIG5hbWU6ICdfX2lvbmljQ2FjaGUnLFxuICAgICAgICAgICAgZHJpdmVyT3JkZXI6IFsnaW5kZXhlZGRiJywgJ3NxbGl0ZScsICd3ZWJzcWwnXVxuICAgICAgICB9KVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgQ2FjaGVNb2R1bGUge1xuICAgIHN0YXRpYyBmb3JSb290KGNhY2hlQ29uZmlnPzogQ2FjaGVDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPENhY2hlTW9kdWxlPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogQ2FjaGVNb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IENPTkZJRyxcbiAgICAgICAgICAgICAgICAgICAgdXNlVmFsdWU6IHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY2FjaGVDb25maWcgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgQ2FjaGVTdG9yYWdlU2VydmljZSxcbiAgICAgICAgICAgICAgICBDYWNoZVNlcnZpY2VcbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=