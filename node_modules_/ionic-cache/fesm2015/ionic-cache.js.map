{"version":3,"file":"ionic-cache.js","sources":["../../../projects/ionic-cache/src/lib/constants/error-messages.constant.ts","../../../projects/ionic-cache/src/lib/helpers/is-http-response.helper.ts","../../../projects/ionic-cache/src/lib/helpers/convert-blob-to-base64.helper.ts","../../../projects/ionic-cache/src/lib/helpers/is-js-or-response-type.helper.ts","../../../projects/ionic-cache/src/lib/helpers/decode-raw-data.helper.ts","../../../projects/ionic-cache/src/lib/constants/default-config.contant.ts","../../../projects/ionic-cache/src/lib/cache.module.ts","../../../projects/ionic-cache/src/lib/services/cache-storage/cache-storage.service.ts","../../../projects/ionic-cache/src/lib/services/cache/cache.service.ts","../../../projects/ionic-cache/src/ionic-cache.ts"],"sourcesContent":["export const errorMessages = {\n    initialization: 'Cache initialization error: ',\n    notEnabled: 'Cache is not enabled.',\n    expired: 'Cache entry already expired: ',\n    notFound: 'No such key: ',\n    browserOffline: 'No entries were deleted, because browser is offline.'\n};\n","import { HttpResponse } from '@angular/common/http';\n\n/**\n * Checks if it's a HttpResponse\n * @param data The variable to test\n * @return The data from cache\n */\nexport function isHttpResponse(data: any): boolean {\n    const orCondition =\n        data &&\n        typeof data === 'object' &&\n        data.hasOwnProperty('status') &&\n        data.hasOwnProperty('statusText') &&\n        data.hasOwnProperty('headers') &&\n        data.hasOwnProperty('url') &&\n        data.hasOwnProperty('body');\n\n    return data && (data instanceof HttpResponse || orCondition);\n}\n","/**\n * Decodes raw data.\n * @param data The data to decode.\n * @return The decoded data.\n */\nexport function convertBlobToBase64(blob): Promise<string | ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(blob);\n        reader.onloadend = () => {\n            const base64data = reader.result;\n            resolve(base64data);\n        };\n        reader.onerror = (event) => {\n            reject(event);\n            reader.abort();\n        };\n    });\n}\n","export function isJsOrResponseType(data: any): boolean {\n    const jsType =\n        data.type === 'undefined' ||\n        data.type === 'object' ||\n        data.type === 'boolean' ||\n        data.type === 'number' ||\n        data.type === 'bigint' ||\n        data.type === 'string' ||\n        data.type === 'symbol' ||\n        data.type === 'function';\n\n    const responseType = data.type === 'response';\n\n    return responseType || jsType;\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { StorageCacheItem } from '../interfaces/cache-storage-item.interface';\nimport { isHttpResponse } from './is-http-response.helper';\nimport { isJsOrResponseType } from './is-js-or-response-type.helper';\n\nexport async function decodeRawData(data: StorageCacheItem): Promise<any> {\n    const dataJson = JSON.parse(data.value);\n    if (isJsOrResponseType(data)) {\n        if (isHttpResponse(dataJson)) {\n            const response: any = {\n                body: dataJson._body || dataJson.body,\n                status: dataJson.status,\n                headers: dataJson.headers,\n                statusText: dataJson.statusText,\n                url: dataJson.url\n            };\n\n            return new HttpResponse(response);\n        }\n\n        return dataJson;\n    } else {\n        // Technique derived from: https://stackoverflow.com/a/36183085\n        const response = await fetch(dataJson);\n\n        return response.blob();\n    }\n}\n","import { CacheConfig } from '../interfaces/cache-config.interface';\n\nexport const defaultConfig: CacheConfig = {\n    keyPrefix: ''\n};\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { CacheService } from './services/cache/cache.service';\nimport { IonicStorageModule } from '@ionic/storage-angular';\nimport { defaultConfig } from './constants/default-config.contant';\nimport { CacheConfig } from './interfaces/cache-config.interface';\nimport { CacheStorageService } from './services/cache-storage/cache-storage.service';\n\nexport const CONFIG = new InjectionToken<CacheConfig>('CONFIG');\n\n@NgModule({\n    imports: [\n        IonicStorageModule.forRoot({\n            name: '__ionicCache',\n            driverOrder: ['indexeddb', 'sqlite', 'websql']\n        })\n    ]\n})\nexport class CacheModule {\n    static forRoot(cacheConfig?: CacheConfig): ModuleWithProviders<CacheModule> {\n        return {\n            ngModule: CacheModule,\n            providers: [\n                {\n                    provide: CONFIG,\n                    useValue: { ...defaultConfig, ...cacheConfig }\n                },\n                CacheStorageService,\n                CacheService\n            ]\n        };\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage-angular';\nimport { CONFIG } from '../../cache.module';\nimport { CacheConfig } from '../../interfaces/cache-config.interface';\nimport { StorageCacheItem } from '../../interfaces/cache-storage-item.interface';\n\n@Injectable()\nexport class CacheStorageService {\n    constructor(private storage: Storage, @Inject(CONFIG) private config: CacheConfig) {}\n\n    public create(): Promise<Storage> {\n        return this.storage.create();\n    }\n\n    public async set(key: string, value: any): Promise<any> {\n        return this.storage.set(this.buildKey(key), value);\n    }\n\n    public async remove(key: string): Promise<any> {\n        return this.storage.remove(this.buildKey(key));\n    }\n\n    public async get(key: string): Promise<any> {\n        const value = await this.storage.get(this.buildKey(key));\n        return !!value ? Object.assign({ key }, value) : null;\n    }\n\n    public async exists(key: string): Promise<boolean> {\n        return !!(await this.storage.get(this.buildKey(key)));\n    }\n\n    public async all(): Promise<StorageCacheItem[]> {\n        const items: StorageCacheItem[] = [];\n        await this.storage.forEach((val: any, key: string) => {\n            if (this.isCachedItem(key, val)) {\n                items.push(Object.assign({ key: this.debuildKey(key) }, val));\n            }\n        });\n\n        return items;\n    }\n\n    /**\n     * Returns whether or not an object is a cached item.\n     */\n    private isCachedItem(key: string, item: any): boolean {\n        return item && item.expires && item.type && key.startsWith(this.config.keyPrefix);\n    }\n\n    /**\n     * Makes sure that the key is prefixed properly\n     */\n    private buildKey(key: string): string {\n        if (key.startsWith(this.config.keyPrefix)) {\n            return key;\n        }\n\n        return this.config.keyPrefix + key;\n    }\n\n    /**\n     * Makes sure that the key isn't prefixed\n     */\n    private debuildKey(key: string): string {\n        if (key.startsWith(this.config.keyPrefix)) {\n            return key.substr(this.config.keyPrefix.length);\n        }\n\n        return key;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { defer, from, throwError } from 'rxjs';\nimport { share, catchError } from 'rxjs/operators';\nimport { CacheStorageService } from '../cache-storage/cache-storage.service';\nimport { StorageCacheItem } from '../../interfaces/cache-storage-item.interface';\nimport { errorMessages } from '../../constants/error-messages.constant';\nimport { isHttpResponse } from '../../helpers/is-http-response.helper';\nimport { convertBlobToBase64 } from '../../helpers/convert-blob-to-base64.helper';\nimport { decodeRawData } from '../../helpers/decode-raw-data.helper';\n\n@Injectable()\nexport class CacheService {\n    private ttl: number = 60 * 60; // one hour\n    private cacheEnabled: boolean = true;\n    private invalidateOffline: boolean = false;\n\n    constructor(private cacheStorage: CacheStorageService) {\n        this.loadCache();\n    }\n\n    /**\n     * Disable or enable cache.\n     */\n    public enableCache(enable: boolean = true): void {\n        this.cacheEnabled = enable;\n    }\n\n    /**\n     * Set if expired cache should be invalidated if device is offline.\n     */\n    public setOfflineInvalidate(offlineInvalidate: boolean): void {\n        this.invalidateOffline = !offlineInvalidate;\n    }\n\n    /**\n     * Set default TTL.\n     * @param ttl TTL in seconds.\n     */\n    public setDefaultTTL(ttl: number): number {\n        return (this.ttl = ttl);\n    }\n\n    /**\n     * Checks if the device is online.\n     */\n    public isOnline(): boolean {\n        return navigator.onLine;\n    }\n\n    /**\n     * Saves an item to the cache storage with the provided options.\n     * @param key The unique key\n     * @param data The data to store\n     * @param groupKey The group key\n     * @param ttl The TTL in seconds\n     * @returns The saved data\n     */\n    public saveItem(key: string, data: any, groupKey: string = 'none', ttl: number = this.ttl): Promise<any> {\n        if (!this.cacheEnabled) {\n            throw new Error(errorMessages.notEnabled);\n        }\n\n        if (Blob.name === data.constructor.name) {\n            return this.saveBlobItem(key, data, groupKey, ttl);\n        }\n\n        const expires = new Date().getTime() + ttl * 1000;\n        const type = isHttpResponse(data) ? 'response' : typeof data;\n        const value = JSON.stringify(data);\n\n        return this.cacheStorage.set(key, {\n            value,\n            expires,\n            type,\n            groupKey\n        });\n    }\n\n    /**\n     * Deletes an item from the cache storage.\n     * @param key The unique key\n     * @returns A promise which will resolve when the item is removed.\n     */\n    public removeItem(key: string): Promise<any> {\n        if (!this.cacheEnabled) {\n            throw new Error(errorMessages.notEnabled);\n        }\n\n        return this.cacheStorage.remove(key);\n    }\n\n    /**\n     * Removes all items with a key that matches pattern.\n     * @returns A promise which will resolve when all the items are removed.\n     */\n    public async removeItems(pattern: string): Promise<any> {\n        if (!this.cacheEnabled) {\n            throw new Error(errorMessages.notEnabled);\n        }\n\n        const regex = new RegExp(`^${pattern.split('*').join('.*')}$`);\n        const items = await this.cacheStorage.all();\n\n        return Promise.all(\n            items\n                .map((item) => item.key)\n                .filter((key) => key && regex.test(key))\n                .map((key) => this.removeItem(key))\n        );\n    }\n\n    /**\n     * Gets item from cache without checking if it is expired.\n     * @param key The unique key\n     * @returns A promise which will resolve with the data from the cache.\n     */\n    public async getRawItem(key: string): Promise<StorageCacheItem> {\n        if (!this.cacheEnabled) {\n            throw new Error(errorMessages.notEnabled);\n        }\n\n        try {\n            const data = await this.cacheStorage.get(key);\n            if (!!data) {\n                return data;\n            }\n\n            throw new Error('');\n        } catch (err) {\n            throw new Error(errorMessages.notFound + key);\n        }\n    }\n\n    /**\n     * Gets all items from the cache without checking if they are expired.\n     * @returns A promise which will resove with all the items in the cache.\n     */\n    public getRawItems(): Promise<StorageCacheItem[]> {\n        return this.cacheStorage.all();\n    }\n\n    /**\n     * Check sif item exists in cache regardless if expired or not.\n     * @param key The unique key\n     * @returns A boolean which will be true the key if exists.\n     */\n    public itemExists(key: string): Promise<boolean | string> {\n        if (!this.cacheEnabled) {\n            throw new Error(errorMessages.notEnabled);\n        }\n\n        return this.cacheStorage.exists(key);\n    }\n\n    /**\n     * Gets item from cache with expire check.\n     * @param key The unique key\n     * @returns The data from the cache\n     */\n    public async getItem<T = any>(key: string): Promise<T> {\n        if (!this.cacheEnabled) {\n            throw new Error(errorMessages.notEnabled);\n        }\n\n        const data = await this.getRawItem(key);\n\n        if (data.expires < new Date().getTime() && (this.invalidateOffline || this.isOnline())) {\n            throw new Error(errorMessages.expired + key);\n        }\n\n        return decodeRawData(data);\n    }\n\n    /**\n     * Gets or sets an item in the cache storage\n     * @param key The unique key\n     * @param factory The factory to update the value with if it's not present.\n     * @param groupKey The group key\n     * @param ttl The TTL in seconds.\n     * @returns A promise which resolves with the data.\n     */\n    public async getOrSetItem<T>(key: string, factory: () => Promise<T>, groupKey?: string, ttl?: number): Promise<T> {\n        let val: T;\n\n        try {\n            val = await this.getItem<T>(key);\n        } catch (error) {\n            val = await factory();\n            await this.saveItem(key, val, groupKey, ttl);\n        }\n\n        return val;\n    }\n\n    /**\n     * Loads an item from the cache, if it's not there it will use the provided observable to set the value and return it.\n     * @param key The unique key\n     * @param observable The observable to provide the data if it's not present in the cache.\n     * @param groupKey The group key\n     * @param ttl The TTL in seconds\n     * @returns An observable with the data from the cache or provided observable.\n     */\n    public loadFromObservable<T = any>(key: string, observable: any, groupKey?: string, ttl?: number): Observable<T> {\n        if (!this.cacheEnabled) {\n            return observable;\n        }\n\n        observable = observable.pipe(share());\n\n        return defer(() => {\n            return from(this.getItem(key)).pipe(\n                catchError((e) => {\n                    observable.subscribe(\n                        (res) => {\n                            return this.saveItem(key, res, groupKey, ttl);\n                        },\n                        (error) => {\n                            return throwError(error);\n                        }\n                    );\n\n                    return observable;\n                })\n            );\n        });\n    }\n\n    /**\n     * Loads an item from cache regardless of expiry.\n     * If the delay type is set to expired it will only get data from the observable when the item is expired.\n     * If the delay type is set to all it will always get data from the observable.\n     * @param key The unique key\n     * @param observable The observable with data.\n     * @param groupKey The group key\n     * @param ttl The TTL in seconds\n     * @param delayType The delay type, defaults to expired.\n     * @param metaKey The property on T to which to assign meta data.\n     * @returns An observable which will emit the data.\n     */\n    public loadFromDelayedObservable<T = any>(\n        key: string,\n        observable: Observable<T>,\n        groupKey?: string,\n        ttl: number = this.ttl,\n        delayType: string = 'expired',\n        metaKey?: string\n    ): Observable<T> {\n        if (!this.cacheEnabled) {\n            return observable;\n        }\n\n        const observableSubject = new Subject<T>();\n        observable = observable.pipe(share());\n\n        const subscribeOrigin = () => {\n            observable.subscribe(\n                (res) => {\n                    this.saveItem(key, res, groupKey, ttl);\n                    observableSubject.next(res);\n                    observableSubject.complete();\n                },\n                (err) => {\n                    observableSubject.error(err);\n                },\n                () => {\n                    observableSubject.complete();\n                }\n            );\n        };\n\n        this.getItem<T>(key)\n            .then((data) => {\n                if (metaKey) {\n                    data[metaKey] = data[metaKey] || {};\n                    data[metaKey].fromCache = true;\n                }\n                observableSubject.next(data);\n\n                if (delayType === 'all') {\n                    subscribeOrigin();\n                } else {\n                    observableSubject.complete();\n                }\n            })\n            .catch((e) => {\n                this.getRawItem(key)\n                    .then(async (res) => {\n                        const result = await decodeRawData(res);\n                        if (metaKey) {\n                            result[metaKey] = result[metaKey] || {};\n                            result[metaKey].fromCache = true;\n                        }\n                        observableSubject.next(result);\n                        subscribeOrigin();\n                    })\n                    .catch(() => subscribeOrigin());\n            });\n\n        return observableSubject.asObservable();\n    }\n\n    /**\n     * Perform complete cache clear\n     * @returns A promise which resolves when the cache storage is cleared.\n     */\n    public clearAll(): Promise<any> {\n        if (!this.cacheEnabled) {\n            throw new Error(errorMessages.notEnabled);\n        }\n\n        return this.resetDatabase();\n    }\n\n    /**\n     * Removes all expired items from the cache.\n     * @param ignoreOnlineStatus Ignores the online status, defaults to false.\n     * @returns A promise which resolves when all expired items are cleared from cache storage.\n     */\n    public async clearExpired(ignoreOnlineStatus = false): Promise<any> {\n        if (!this.cacheEnabled) {\n            throw new Error(errorMessages.notEnabled);\n        }\n\n        if (!this.isOnline() && !ignoreOnlineStatus) {\n            throw new Error(errorMessages.browserOffline);\n        }\n\n        const items = await this.cacheStorage.all();\n        const datetime = new Date().getTime();\n\n        return Promise.all(items.filter((item) => item.expires < datetime).map((item) => this.removeItem(item.key)));\n    }\n\n    /**\n     * Removes all item with specified group\n     * @param groupKey The group key\n     * @returns A promise which resolves when all the items in the group have been cleared.\n     */\n    async clearGroup(groupKey: string): Promise<any> {\n        if (!this.cacheEnabled) {\n            throw new Error(errorMessages.notEnabled);\n        }\n\n        const items = await this.cacheStorage.all();\n\n        return Promise.all(items.filter((item) => item.groupKey === groupKey).map((item) => this.removeItem(item.key)));\n    }\n\n    /**\n     * Creates the cache storage.\n     * If it fails it will provide and error message.\n     */\n    private async loadCache(): Promise<void> {\n        if (!this.cacheEnabled) {\n            return;\n        }\n\n        try {\n            await this.cacheStorage.create();\n        } catch (error) {\n            this.cacheEnabled = false;\n            console.error(errorMessages.initialization, error);\n        }\n    }\n\n    /**\n     * Resets the storage back to being empty.\n     */\n    private async resetDatabase(): Promise<any> {\n        const items = await this.cacheStorage.all();\n        return Promise.all(items.map((item) => this.removeItem(item.key)));\n    }\n\n    /**\n     * Saves a blob item to the cache storage with the provided options.\n     * @param key The unique key\n     * @param blob The blob to store\n     * @param groupKey The group key\n     * @param ttl The TTL in seconds\n     * @returns The saved data\n     */\n    private async saveBlobItem(\n        key: string,\n        blob: any,\n        groupKey: string = 'none',\n        ttl: number = this.ttl\n    ): Promise<any> {\n        if (!this.cacheEnabled) {\n            throw new Error(errorMessages.notEnabled);\n        }\n\n        const expires = new Date().getTime() + ttl * 1000;\n        const type = blob.type;\n\n        try {\n            const base64data = await convertBlobToBase64(blob);\n            const value = JSON.stringify(base64data);\n\n            return this.cacheStorage.set(key, {\n                value,\n                expires,\n                type,\n                groupKey\n            });\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}